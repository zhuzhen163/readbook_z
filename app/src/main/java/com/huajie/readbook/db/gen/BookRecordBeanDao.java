package com.huajie.readbook.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huajie.readbook.db.entity.BookRecordBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_RECORD_BEAN".
*/
public class BookRecordBeanDao extends AbstractDao<BookRecordBean, String> {

    public static final String TABLENAME = "BOOK_RECORD_BEAN";

    /**
     * Properties of entity BookRecordBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookId = new Property(0, String.class, "bookId", true, "BOOK_ID");
        public final static Property Chapter = new Property(1, int.class, "chapter", false, "CHAPTER");
        public final static Property PagePos = new Property(2, int.class, "pagePos", false, "PAGE_POS");
        public final static Property ChapterPercent = new Property(3, String.class, "chapterPercent", false, "CHAPTER_PERCENT");
        public final static Property Logo = new Property(4, String.class, "logo", false, "LOGO");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property LastRead = new Property(6, String.class, "lastRead", false, "LAST_READ");
        public final static Property Notes = new Property(7, String.class, "notes", false, "NOTES");
        public final static Property ClassifyId = new Property(8, String.class, "classifyId", false, "CLASSIFY_ID");
    }


    public BookRecordBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookRecordBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_RECORD_BEAN\" (" + //
                "\"BOOK_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: bookId
                "\"CHAPTER\" INTEGER NOT NULL ," + // 1: chapter
                "\"PAGE_POS\" INTEGER NOT NULL ," + // 2: pagePos
                "\"CHAPTER_PERCENT\" TEXT," + // 3: chapterPercent
                "\"LOGO\" TEXT," + // 4: logo
                "\"NAME\" TEXT," + // 5: name
                "\"LAST_READ\" TEXT," + // 6: lastRead
                "\"NOTES\" TEXT," + // 7: notes
                "\"CLASSIFY_ID\" TEXT);"); // 8: classifyId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_RECORD_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookRecordBean entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
        stmt.bindLong(2, entity.getChapter());
        stmt.bindLong(3, entity.getPagePos());
 
        String chapterPercent = entity.getChapterPercent();
        if (chapterPercent != null) {
            stmt.bindString(4, chapterPercent);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(5, logo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String lastRead = entity.getLastRead();
        if (lastRead != null) {
            stmt.bindString(7, lastRead);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(8, notes);
        }
 
        String classifyId = entity.getClassifyId();
        if (classifyId != null) {
            stmt.bindString(9, classifyId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookRecordBean entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
        stmt.bindLong(2, entity.getChapter());
        stmt.bindLong(3, entity.getPagePos());
 
        String chapterPercent = entity.getChapterPercent();
        if (chapterPercent != null) {
            stmt.bindString(4, chapterPercent);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(5, logo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String lastRead = entity.getLastRead();
        if (lastRead != null) {
            stmt.bindString(7, lastRead);
        }
 
        String notes = entity.getNotes();
        if (notes != null) {
            stmt.bindString(8, notes);
        }
 
        String classifyId = entity.getClassifyId();
        if (classifyId != null) {
            stmt.bindString(9, classifyId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BookRecordBean readEntity(Cursor cursor, int offset) {
        BookRecordBean entity = new BookRecordBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookId
            cursor.getInt(offset + 1), // chapter
            cursor.getInt(offset + 2), // pagePos
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chapterPercent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // logo
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // lastRead
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // notes
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // classifyId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookRecordBean entity, int offset) {
        entity.setBookId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChapter(cursor.getInt(offset + 1));
        entity.setPagePos(cursor.getInt(offset + 2));
        entity.setChapterPercent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLogo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLastRead(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNotes(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setClassifyId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookRecordBean entity, long rowId) {
        return entity.getBookId();
    }
    
    @Override
    public String getKey(BookRecordBean entity) {
        if(entity != null) {
            return entity.getBookId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookRecordBean entity) {
        return entity.getBookId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
