package com.huajie.readbook.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.huajie.readbook.db.entity.BookMarkBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_MARK_BEAN".
*/
public class BookMarkBeanDao extends AbstractDao<BookMarkBean, Void> {

    public static final String TABLENAME = "BOOK_MARK_BEAN";

    /**
     * Properties of entity BookMarkBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BookId = new Property(0, String.class, "bookId", false, "BOOK_ID");
        public final static Property Chapter = new Property(1, int.class, "chapter", false, "CHAPTER");
        public final static Property PagePos = new Property(2, int.class, "pagePos", false, "PAGE_POS");
        public final static Property BooName = new Property(3, String.class, "booName", false, "BOO_NAME");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
    }


    public BookMarkBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookMarkBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_MARK_BEAN\" (" + //
                "\"BOOK_ID\" TEXT," + // 0: bookId
                "\"CHAPTER\" INTEGER NOT NULL ," + // 1: chapter
                "\"PAGE_POS\" INTEGER NOT NULL ," + // 2: pagePos
                "\"BOO_NAME\" TEXT," + // 3: booName
                "\"CONTENT\" TEXT," + // 4: content
                "\"TIME\" TEXT);"); // 5: time
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_BOOK_MARK_BEAN_BOOK_ID ON BOOK_MARK_BEAN" +
                " (\"BOOK_ID\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_MARK_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookMarkBean entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
        stmt.bindLong(2, entity.getChapter());
        stmt.bindLong(3, entity.getPagePos());
 
        String booName = entity.getBooName();
        if (booName != null) {
            stmt.bindString(4, booName);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookMarkBean entity) {
        stmt.clearBindings();
 
        String bookId = entity.getBookId();
        if (bookId != null) {
            stmt.bindString(1, bookId);
        }
        stmt.bindLong(2, entity.getChapter());
        stmt.bindLong(3, entity.getPagePos());
 
        String booName = entity.getBooName();
        if (booName != null) {
            stmt.bindString(4, booName);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BookMarkBean readEntity(Cursor cursor, int offset) {
        BookMarkBean entity = new BookMarkBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // bookId
            cursor.getInt(offset + 1), // chapter
            cursor.getInt(offset + 2), // pagePos
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // booName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookMarkBean entity, int offset) {
        entity.setBookId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setChapter(cursor.getInt(offset + 1));
        entity.setPagePos(cursor.getInt(offset + 2));
        entity.setBooName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BookMarkBean entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BookMarkBean entity) {
        return null;
    }

    @Override
    public boolean hasKey(BookMarkBean entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
